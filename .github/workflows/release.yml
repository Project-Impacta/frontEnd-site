name: Release Workflow

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  workflow_run:
    workflows: ["Versioning Workflow"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
          persist-credentials: true
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.11.1'
      - name: Install dependencies
        run: npm ci
      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
        run: npx semantic-release
      - name: Commit updated package.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git diff --quiet; then
            echo "No changes to commit, skipping."
          else
            git add package.json
            git commit -m "chore: update package.json version [skip ci]" || echo "No changes to commit"
            git stash
            if git pull --rebase; then
              git stash pop
              git push
            else
              git rebase --abort
              git stash pop
              echo "Rebase failed due to conflicts, aborting."
              exit 1
            fi
          fi
      - name: Create new branch
        run: |
          echo "Fetching remote branches..."
          git fetch origin
          echo "Getting current version..."
          current_version=$(git describe --tags)
          echo "Current version: $current_version"
          branch_name="release/$current_version"
          echo "Creating new branch: $branch_name"
          git checkout -b $branch_name
          git branch --set-upstream-to=origin/main $branch_name
          if git pull --rebase; then
            git push -u origin $branch_name
            echo "New branch $branch_name created and pushed successfully."
          else
            git rebase --abort
            echo "Rebase failed due to conflicts, aborting."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
